#edit-mode: -*- python -*-
#coding:gbk

#工作路径.
WORKROOT('../../../../../')

#使用硬链接copy.
CopyUsingHardLink(True)

#支持32位/64位平台编译
#ENABLE_MULTI_LIBS(True)

#C预处理器参数.
CPPFLAGS('-D_GNU_SOURCE -D__STDC_LIMIT_MACROS -DVERSION=\\\"1.9.8.7\\\"')
#为32位目标编译指定额外的预处理参数
#CPPFLAGS_32('-D_XOPEN_SOURE=500')

#C编译参数.
CFLAGS('-g -pipe -W -Wall -fPIC')

#C++编译参数.
CXXFLAGS('-g -pipe -W -Wall -fPIC')

#IDL编译参数
IDLFLAGS('--compack')

#UBRPC编译参数
UBRPCFLAGS('--compack')

#头文件路径.
INCPATHS('. ./include ./output ./output/include')

#使用库
#LIBS('./libCCodeMaster.a')

#链接参数.
LDFLAGS('-lpthread -lcrypto -lrt')

#依赖模块
#CONFIGS('lib2-64/ullib')
CONFIGS_64('third-64/boost@base')
CONFIGS('third-64/gtest@gtest_1-4-0-500_PD_BL')
CONFIGS('app-test/ecom/im/common/utlib@trunk')
CONFIGS('com/btest/gtest@gtest_1-0-3-0_PD_BL')

#为32位/64位指定不同的依赖路径.
#CONFIGS_32('lib2/ullib')
#CONFIGS_64('lib2-64/ullib')

user_sources='dictparse.cpp  dict_handle.cpp'
user_headers=''

#可执行文件
Application('dictparse',Sources(user_sources))
#静态库
StaticLibrary('dictparse',Sources(user_sources),HeaderFiles(user_headers))
#共享库
#SharedLibrary('CCodeMaster',Sources(user_sources),HeaderFiles(user_headers))
#子目录
#Directory('demo')

ut_sources=glob.glob('test/test_*.cpp')
import string
ut_target_list = []
for test in ut_sources:
  ut_target = os.path.splitext(test)[0]
  Application(ut_target,Sources(test,
  CppFlags('-D__INLINE__="" -Dprivate=public -Dprotected=public -D__64BIT__')),
  HeaderFiles(user_headers),
  Libraries('./libdictparse.a'),
  LinkFlags('-lpthread -lcrypto -lrt'))
  ut_target_list.append(ut_target)
TARGET('ut', PhonyMode(True), Prefixes(string.join(ut_target_list)),ShellCommands('autorun.sh -u -p "test/*"'))
